// Code generated by scale-signature-go v0.1.0, DO NOT EDIT.
// schema: MasterSchema:MasterSchemaTag
// output: golang_tests

package golang_tests

import (
	"github.com/loopholelabs/polyglot"
	"unsafe"
)

var (
	writeBuffer = polyglot.NewBuffer()
	readBuffer  []byte
)

// _Write serializes the signature into the global writeBuffer and returns the pointer to the buffer and its size
//
// Users should not use this method.
func _Write(input *EmptyModel, output *ModelWithAllFieldTypes) (uint32, uint32) {
	writeBuffer.Reset()

	input.Encode(writeBuffer)

	output.Encode(writeBuffer)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	return uint32(unsafePtr), uint32(writeBuffer.Len())
}

// _Read deserializes signature from the global readBuffer
//
// Users should not use this method.
func _Read(input *EmptyModel, output *ModelWithAllFieldTypes) (*EmptyModel, *ModelWithAllFieldTypes, error) {
	var err error

	input, err = DecodeEmptyModel(input, readBuffer)
	if err != nil {
		return nil, nil, err
	}

	output, err = DecodeModelWithAllFieldTypes(output, readBuffer)
	return input, output, err
}

// _Error serializes an error into the global writeBuffer and returns a pointer to the buffer and its size
//
// Users should not use this method.
func _Error(err error) (uint32, uint32) {
	writeBuffer.Reset()
	polyglot.Encoder(writeBuffer).Error(err)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	return uint32(unsafePtr), uint32(writeBuffer.Len())
}

// _Resize resizes the global readBuffer to the given size and returns the pointer to the buffer
//
// Users should not use this method.
func _Resize(size uint32) uint32 {
	if uint32(cap(readBuffer)) < size {
		readBuffer = append(make([]byte, 0, uint32(len(readBuffer))+size), readBuffer...)
	}
	readBuffer = readBuffer[:size]
	return uint32(uintptr(unsafe.Pointer(&readBuffer[0])))
}

// Next calls the next function in the Scale Function Chain
func Next(input *EmptyModel, output *ModelWithAllFieldTypes) (*EmptyModel, *ModelWithAllFieldTypes, error) {
	next(_Write(input, output))
	return _Read(input, output)
}

//export next
//go:linkname next
func next(offset uint32, length uint32)
