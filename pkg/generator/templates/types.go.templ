// Code generated by scale-signature-go {{ .version }}, DO NOT EDIT.
// schema: {{ .schema.Name }}:{{ .schema.Tag }}
// output: types.go

package {{ .package }}

import (
    "github.com/loopholelabs/polyglot-go"
    "errors"
)

{{- range .schema.Models -}}
{{ $current_model := . }}

{{- range .Enums }}
type Enum{{ $current_model.Name }}{{ .Name }} uint32
{{ $current_enum := . }}
const (
    {{- range $index, $value := .Values }}
    Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }} Enum{{ $current_model.Name }}{{ $current_enum.Name }} = {{ $index }}
    {{ end }}
)
{{ end }}

{{- range .EnumArrays }}
type Enum{{ $current_model.Name }}{{ .Name }} uint32
{{ $current_enum := . }}
const (
    {{- range $index, $value := .Values }}
    Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }} Enum{{ $current_model.Name }}{{ $current_enum.Name }} = {{ $index }}
    {{ end }}
)
{{ end }}

{{- range .EnumMaps }}
type Enum{{ $current_model.Name }}{{ .Name }} uint32
{{ $current_enum := . }}
const (
    {{- range $index, $value := .Values }}
    Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }} Enum{{ $current_model.Name }}{{ $current_enum.Name }} = {{ $index }}
    {{ end }}
)
{{ end }}

{{- if .Description }}
// {{ .Name }}: {{ .Description }}
{{ end -}}

type {{ .Name }} struct {

{{- range .Models }}
    {{ .Name }} *{{ .Reference }}
{{ end }}

{{- range .ModelArrays }}
    {{ .Name }} []*{{ .Reference }}
{{ end }}

{{- range .ModelMaps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[*{{ .Reference }}]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[*{{ .Reference }}]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[*{{ .Reference }}]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[*{{ .Reference }}]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Strings }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} string
    {{- else }}
    {{ .Name }} string
    {{- end -}}
{{ end }}

{{- range .StringArrays }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} []string
    {{- else }}
    {{ .Name }} []string
    {{- end -}}
{{ end }}

{{- range .StringMaps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[string]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[string]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[string]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[string]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Int32s }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} int32
    {{- else }}
    {{ .Name }} int32
    {{- end -}}
{{ end }}

{{- range .Int32Arrays }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} []int32
    {{- else }}
    {{ .Name }} []int32
    {{- end -}}
{{ end }}

{{- range .Int32Maps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[int32]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[int32]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[int32]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[int32]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Int64s }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} int64
    {{- else }}
    {{ .Name }} int64
    {{- end -}}
{{ end }}

{{- range .Int64Arrays }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} []int64
    {{- else }}
    {{ .Name }} []int64
    {{- end -}}
{{ end }}

{{- range .Int64Maps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[int64]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[int64]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[int64]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[int64]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Uint32s }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} uint32
    {{- else }}
    {{ .Name }} uint32
    {{- end -}}
{{ end }}

{{- range .Uint32Arrays }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} []uint32
    {{- else }}
    {{ .Name }} []uint32
    {{- end -}}
{{ end }}

{{- range .Uint32Maps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[uint32]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[uint32]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[uint32]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[uint32]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Uint64s }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} uint64
    {{- else }}
    {{ .Name }} uint64
    {{- end -}}
{{ end }}

{{- range .Uint64Arrays }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} []uint64
    {{- else }}
    {{ .Name }} []uint64
    {{- end -}}
{{ end }}

{{- range .Uint64Maps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[uint64]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[uint64]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[uint64]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[uint64]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Float32s }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} float32
    {{- else }}
    {{ .Name }} float32
    {{- end -}}
{{ end }}

{{- range .Float32Arrays }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} []float32
    {{- else }}
    {{ .Name }} []float32
    {{- end -}}
{{ end }}

{{- range .Float32Maps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[float32]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[float32]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[float32]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[float32]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Float64s }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} float64
    {{- else }}
    {{ .Name }} float64
    {{- end -}}
{{ end }}

{{- range .Float64Arrays }}
    {{- if (Deref .Accessor) }}
    {{ LowerFirst .Name }} []float64
    {{- else }}
    {{ .Name }} []float64
    {{- end -}}
{{ end }}

{{- range .Float64Maps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[float64]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[float64]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[float64]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[float64]*{{ .Value }}
    {{- end }}
{{ end }}

{{- range .Enums }}
    {{ .Name }} Enum{{ $current_model.Name }}{{ .Name }}
{{ end }}

{{- range .EnumArrays }}
    {{ .Name }} []Enum{{ $current_model.Name }}{{ .Name }}
{{ end }}

{{- range .EnumMaps }}
    {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
    {{ LowerFirst .Name }} map[Enum{{ $current_model.Name }}{{ .Name }}]{{ .Value }}
    {{- end }}

    {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
    {{ LowerFirst .Name }} map[Enum{{ $current_model.Name }}{{ .Name }}]*{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
    {{ .Name }} map[Enum{{ $current_model.Name }}{{ .Name }}]{{ .Value }}
    {{- end }}

    {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
    {{ .Name }} map[Enum{{ $current_model.Name }}{{ .Name }}]*{{ .Value }}
    {{- end }}
{{ end }}
}
{{ end -}}