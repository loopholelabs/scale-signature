{{ define "go_stringmaps_struct_reference" }}
    {{- range .StringMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            {{ LowerFirst .Name }} map[string]{{ Primitive .Value }}
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            {{ LowerFirst .Name }} map[string]*{{ .Value }}
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            {{ .Name }} map[string]{{ Primitive .Value }}
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            {{ .Name }} map[string]*{{ .Value }}
        {{- end }}
    {{ end }}
{{ end }}

{{ define "go_stringmaps_new_struct_reference" }}
    {{- range .StringMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            {{ LowerFirst .Name }}: make(map[string]{{ Primitive .Value }}),
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            {{ LowerFirst .Name }}: make(map[string]*{{ .Value }}),
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            {{ .Name }}: make(map[string]{{ Primitive .Value }}),
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            {{ .Name }}: make(map[string]*{{ .Value }}),
        {{- end }}
    {{ end }}
{{ end }}

{{ define "go_stringmaps_encode" }}
    {{- range .StringMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            e.Map(uint32(len(x.{{ LowerFirst .Name }})), polyglot.StringKind, {{ PolyglotPrimitive .Value }})
            for k, v := range x.{{ LowerFirst .Name }} {
                e.String(k)
                e.{{ PolyglotPrimitiveEncode .Value }}(v)
            }
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            e.Map(uint32(len(x.{{ LowerFirst .Name }})), polyglot.StringKind, polyglot.AnyKind)
            for k, v := range x.{{ LowerFirst .Name }} {
                e.String(k)
                v.encode(b)
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            e.Map(uint32(len(x.{{ .Name }})), polyglot.StringKind, {{ PolyglotPrimitive .Value }})
            for k, v := range x.{{ .Name }} {
                e.String(k)
                e.{{ PolyglotPrimitiveEncode .Value }}(v)
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            e.Map(uint32(len(x.{{ .Name }})), polyglot.StringKind, polyglot.AnyKind)
            for k, v := range x.{{ .Name }} {
                e.String(k)
                v.encode(b)
            }
        {{- end }}
    {{ end }}
{{ end }}

{{ define "go_stringmaps_decode" }}
    {{- range .StringMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            mapSize{{ LowerFirst .Name }}, err := d.Map(polyglot.StringKind, {{ PolyglotPrimitive .Value }})
            if err != nil {
                return err
            }

            if uint32(len(x.{{ LowerFirst .Name }})) != mapSize{{ LowerFirst .Name }} {
                x.{{ LowerFirst .Name }} = make(map[string]{{ Primitive .Value }}, mapSize{{ LowerFirst .Name }})
            }

            for i := uint32(0); i < mapSize{{ LowerFirst .Name }}; i++ {
            k, err := d.String()
            if err != nil {
            return err
            }
            x.{{ LowerFirst .Name }}[k], err = d.{{ PolyglotPrimitiveDecode .Value }}()
            if err != nil {
            return err
            }
            }
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            mapSize{{ LowerFirst .Name }}, err := d.Map(polyglot.StringKind, polyglot.AnyKind)
            if err != nil {
            return err
            }

            if uint32(len(x.{{ LowerFirst .Name }})) != mapSize{{ LowerFirst .Name }} {
            x.{{ LowerFirst .Name }} = make(map[string]*{{ .Value }}, mapSize{{ LowerFirst .Name }})
            }

            for i := uint32(0); i < mapSize{{ LowerFirst .Name }}; i++ {
            k, err := d.String()
            if err != nil {
            return err
            }
            v := New{{ .Value }}()
            err = v._decode(d)
            if err != nil {
            return err
            }
            x.{{ LowerFirst .Name }}[k] = v
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            mapSize{{ .Name }}, err := d.Map(polyglot.StringKind, {{ PolyglotPrimitive .Value }})
            if err != nil {
            return err
            }

            if uint32(len(x.{{ .Name }})) != mapSize{{ .Name }} {
            x.{{ .Name }} = make(map[string]{{ Primitive .Value }}, mapSize{{ .Name }})
            }

            for i := uint32(0); i < mapSize{{ .Name }}; i++ {
            k, err := d.String()
            if err != nil {
            return err
            }
            x.{{ .Name }}[k], err = d.{{ PolyglotPrimitiveDecode .Value }}()
            if err != nil {
            return err
            }
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            mapSize{{ .Name }}, err := d.Map(polyglot.StringKind, polyglot.AnyKind)
            if err != nil {
            return err
            }

            if uint32(len(x.{{ .Name }})) != mapSize{{ .Name }} {
            x.{{ .Name }} = make(map[string]*{{ .Value }}, mapSize{{ .Name }})
            }

            for i := uint32(0); i < mapSize{{ .Name }}; i++ {
            k, err := d.String()
            if err != nil {
            return err
            }
            v := New{{ .Value }}()
            err = v._decode(d)
            if err != nil {
            return err
            }
            x.{{ .Name }}[k] = v
            }
        {{- end }}
    {{ end }}
{{ end }}