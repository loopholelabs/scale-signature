{{ define "go_enumarrays_definition" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        type Enum{{ $current_model.Name }}{{ .Name }} uint32
        {{ $current_enum := . }}
        const (
        {{- range $index, $value := .Values }}
            Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }} Enum{{ $current_model.Name }}{{ $current_enum.Name }} = {{ $index }}
        {{ end }}
        )
    {{ end }}
{{ end }}

{{ define "go_enumarrays_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{- if (Deref .Accessor) }}
            {{ LowerFirst .Name }} []Enum{{ $current_model.Name }}{{ .Name }}
        {{- else }}
            {{ .Name }} []Enum{{ $current_model.Name }}{{ .Name }}
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enumarrays_new_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{- if .Accessor }}
            {{ LowerFirst .Name }}: make([]Enum{{ $current_model.Name }}{{ .Name }}, 0, {{ .InitialSize }}),
        {{- else }}
            {{ .Name }}: make([]Enum{{ $current_model.Name }}{{ .Name }}, 0, {{ .InitialSize }}),
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enumarrays_encode" }}
    {{- range .EnumArrays }}
        {{- if (Deref .Accessor) }}
            e.Slice(uint32(len(x.{{ LowerFirst .Name }})), polyglot.Uint32Kind)
            for _, a := range x.{{ LowerFirst .Name }} {
                e.Uint32(uint32(a))
            }
        {{- else }}
            e.Slice(uint32(len(x.{{ .Name }})), polyglot.Uint32Kind)
            for _, a := range x.{{ .Name }} {
                e.Uint32(uint32(a))
            }
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enumarrays_decode" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{- if (Deref .Accessor) }}
            sliceSize{{ LowerFirst .Name }}, err := d.Slice(polyglot.Uint32Kind)
            if err != nil {
                return err
            }

            if uint32(len(x.{{ LowerFirst .Name }})) != sliceSize{{ LowerFirst .Name }} {
                x.{{ LowerFirst .Name }} = make([]Enum{{ $current_model.Name }}{{ .Name }}, sliceSize{{ LowerFirst .Name }})
            }

            for i := uint32(0); i < sliceSize{{ LowerFirst .Name }}; i++ {
                enumValue{{ LowerFirst .Name }}, err := d.Uint32()
                if err != nil {
                    return err
                }
                {{ $current_enum := . }}
                switch Enum{{ $current_model.Name }}{{ .Name }}(enumValue{{ LowerFirst .Name }}) {
                {{- range $index, $value := .Values }}
                    case Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }}:
                        x.{{ LowerFirst $current_enum.Name }}[i] = Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }}
                {{- end }}
                    default:
                        return InvalidEnum
                }
            }
        {{- else }}
            sliceSize{{ .Name }}, err := d.Slice(polyglot.Uint32Kind)
            if err != nil {
                return err
            }

            if uint32(len(x.{{ .Name }})) != sliceSize{{ .Name }} {
                x.{{ .Name }} = make([]Enum{{ $current_model.Name }}{{ .Name }}, sliceSize{{ .Name }})
            }

            for i := uint32(0); i < sliceSize{{ .Name }}; i++ {
                enumValue{{ .Name }}, err := d.Uint32()
                if err != nil {
                    return err
                }
                {{ $current_enum := . }}
                switch Enum{{ $current_model.Name }}{{ .Name }}(enumValue{{ .Name }}) {
                {{- range $index, $value := .Values }}
                    case Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }}:
                        x.{{ $current_enum.Name }}[i] = Enum{{ $current_model.Name }}{{ $current_enum.Name }}{{ $value }}
                {{- end }}
                    default:
                        return InvalidEnum
                }
            }
        {{- end -}}
    {{ end }}
{{ end }}